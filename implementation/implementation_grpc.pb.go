// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: implementation/implementation.proto

package implementation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetEnvVarClient is the client API for GetEnvVar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetEnvVarClient interface {
	// A simple RPC.
	//
	// Obtains the feature at a given position.
	//
	// A feature with an empty name is returned if there's no feature at the given
	// position.
	GetEnvVar(ctx context.Context, in *WhichEnvVar, opts ...grpc.CallOption) (*EnvVar, error)
}

type getEnvVarClient struct {
	cc grpc.ClientConnInterface
}

func NewGetEnvVarClient(cc grpc.ClientConnInterface) GetEnvVarClient {
	return &getEnvVarClient{cc}
}

func (c *getEnvVarClient) GetEnvVar(ctx context.Context, in *WhichEnvVar, opts ...grpc.CallOption) (*EnvVar, error) {
	out := new(EnvVar)
	err := c.cc.Invoke(ctx, "/implementation.GetEnvVar/GetEnvVar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetEnvVarServer is the server API for GetEnvVar service.
// All implementations must embed UnimplementedGetEnvVarServer
// for forward compatibility
type GetEnvVarServer interface {
	// A simple RPC.
	//
	// Obtains the feature at a given position.
	//
	// A feature with an empty name is returned if there's no feature at the given
	// position.
	GetEnvVar(context.Context, *WhichEnvVar) (*EnvVar, error)
	mustEmbedUnimplementedGetEnvVarServer()
}

// UnimplementedGetEnvVarServer must be embedded to have forward compatible implementations.
type UnimplementedGetEnvVarServer struct {
}

func (UnimplementedGetEnvVarServer) GetEnvVar(context.Context, *WhichEnvVar) (*EnvVar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvVar not implemented")
}
func (UnimplementedGetEnvVarServer) mustEmbedUnimplementedGetEnvVarServer() {}

// UnsafeGetEnvVarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetEnvVarServer will
// result in compilation errors.
type UnsafeGetEnvVarServer interface {
	mustEmbedUnimplementedGetEnvVarServer()
}

func RegisterGetEnvVarServer(s grpc.ServiceRegistrar, srv GetEnvVarServer) {
	s.RegisterService(&GetEnvVar_ServiceDesc, srv)
}

func _GetEnvVar_GetEnvVar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhichEnvVar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetEnvVarServer).GetEnvVar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/implementation.GetEnvVar/GetEnvVar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetEnvVarServer).GetEnvVar(ctx, req.(*WhichEnvVar))
	}
	return interceptor(ctx, in, info, handler)
}

// GetEnvVar_ServiceDesc is the grpc.ServiceDesc for GetEnvVar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetEnvVar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "implementation.GetEnvVar",
	HandlerType: (*GetEnvVarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEnvVar",
			Handler:    _GetEnvVar_GetEnvVar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "implementation/implementation.proto",
}
